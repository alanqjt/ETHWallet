package com.alan.wallet.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.alan.wallet.bean.Wallet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLET".
*/
public class WalletDao extends AbstractDao<Wallet, String> {

    public static final String TABLENAME = "WALLET";

    /**
     * Properties of entity Wallet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WalletName = new Property(0, String.class, "walletName", false, "WALLET_NAME");
        public final static Property WalletPassword = new Property(1, String.class, "walletPassword", false, "WALLET_PASSWORD");
        public final static Property WalletPasswordHit = new Property(2, String.class, "walletPasswordHit", false, "WALLET_PASSWORD_HIT");
        public final static Property IsBackUp = new Property(3, boolean.class, "isBackUp", false, "IS_BACK_UP");
        public final static Property Address = new Property(4, String.class, "address", true, "ADDRESS");
        public final static Property PrivateKey = new Property(5, String.class, "privateKey", false, "PRIVATE_KEY");
        public final static Property PublicKey = new Property(6, String.class, "publicKey", false, "PUBLIC_KEY");
        public final static Property MnemonicWords = new Property(7, String.class, "mnemonicWords", false, "MNEMONIC_WORDS");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
        public final static Property KeyStore = new Property(9, String.class, "keyStore", false, "KEY_STORE");
        public final static Property KeyStoreFilePath = new Property(10, String.class, "keyStoreFilePath", false, "KEY_STORE_FILE_PATH");
    }


    public WalletDao(DaoConfig config) {
        super(config);
    }
    
    public WalletDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLET\" (" + //
                "\"WALLET_NAME\" TEXT," + // 0: walletName
                "\"WALLET_PASSWORD\" TEXT," + // 1: walletPassword
                "\"WALLET_PASSWORD_HIT\" TEXT," + // 2: walletPasswordHit
                "\"IS_BACK_UP\" INTEGER NOT NULL ," + // 3: isBackUp
                "\"ADDRESS\" TEXT PRIMARY KEY NOT NULL ," + // 4: address
                "\"PRIVATE_KEY\" TEXT," + // 5: privateKey
                "\"PUBLIC_KEY\" TEXT," + // 6: publicKey
                "\"MNEMONIC_WORDS\" TEXT," + // 7: mnemonicWords
                "\"PASSWORD\" TEXT," + // 8: password
                "\"KEY_STORE\" TEXT," + // 9: keyStore
                "\"KEY_STORE_FILE_PATH\" TEXT);"); // 10: keyStoreFilePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Wallet entity) {
        stmt.clearBindings();
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(1, walletName);
        }
 
        String walletPassword = entity.getWalletPassword();
        if (walletPassword != null) {
            stmt.bindString(2, walletPassword);
        }
 
        String walletPasswordHit = entity.getWalletPasswordHit();
        if (walletPasswordHit != null) {
            stmt.bindString(3, walletPasswordHit);
        }
        stmt.bindLong(4, entity.getIsBackUp() ? 1L: 0L);
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(6, privateKey);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(7, publicKey);
        }
 
        String mnemonicWords = entity.getMnemonicWords();
        if (mnemonicWords != null) {
            stmt.bindString(8, mnemonicWords);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String keyStore = entity.getKeyStore();
        if (keyStore != null) {
            stmt.bindString(10, keyStore);
        }
 
        String keyStoreFilePath = entity.getKeyStoreFilePath();
        if (keyStoreFilePath != null) {
            stmt.bindString(11, keyStoreFilePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Wallet entity) {
        stmt.clearBindings();
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(1, walletName);
        }
 
        String walletPassword = entity.getWalletPassword();
        if (walletPassword != null) {
            stmt.bindString(2, walletPassword);
        }
 
        String walletPasswordHit = entity.getWalletPasswordHit();
        if (walletPasswordHit != null) {
            stmt.bindString(3, walletPasswordHit);
        }
        stmt.bindLong(4, entity.getIsBackUp() ? 1L: 0L);
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(6, privateKey);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(7, publicKey);
        }
 
        String mnemonicWords = entity.getMnemonicWords();
        if (mnemonicWords != null) {
            stmt.bindString(8, mnemonicWords);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String keyStore = entity.getKeyStore();
        if (keyStore != null) {
            stmt.bindString(10, keyStore);
        }
 
        String keyStoreFilePath = entity.getKeyStoreFilePath();
        if (keyStoreFilePath != null) {
            stmt.bindString(11, keyStoreFilePath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public Wallet readEntity(Cursor cursor, int offset) {
        Wallet entity = new Wallet( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // walletName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // walletPassword
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // walletPasswordHit
            cursor.getShort(offset + 3) != 0, // isBackUp
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // privateKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publicKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mnemonicWords
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // keyStore
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // keyStoreFilePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Wallet entity, int offset) {
        entity.setWalletName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWalletPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWalletPasswordHit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsBackUp(cursor.getShort(offset + 3) != 0);
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrivateKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublicKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMnemonicWords(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setKeyStore(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setKeyStoreFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Wallet entity, long rowId) {
        return entity.getAddress();
    }
    
    @Override
    public String getKey(Wallet entity) {
        if(entity != null) {
            return entity.getAddress();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Wallet entity) {
        return entity.getAddress() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
